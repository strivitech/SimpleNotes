@page "/NotesList"
@using SimpleNotes.PageModels
@using SimpleNotes.Services
@using SimpleNotes.Contracts
@inject NavigationManager NavigationManager
@inject INotesService NotesService

<h2>Notes List</h2>

<div class="notes-container">
    @foreach (var note in _notesList)
    {
        <div class="note">
            <div class="note-row">
                <span class="note-title">@note.Title</span>
                <span class="note-createdat">Created: @note.CreatedAt.ToString("yyyy-MM-dd HH:mm")</span>
                <div class="note-actions">
                    <button class="btn-view-hide" @onclick="() => LoadContent(note)">
                        @(note.IsContentVisible ? "Hide Note" : "View Note")
                    </button>
                    <button class="btn-edit" @onclick="() => EditNote(note)">Edit Note</button>
                </div>
            </div>
            @if (note.IsContentVisible)
            {
                <div class="note-content">
                    <p>@note.Content</p>
                </div>
            }
        </div>
    }

    <button type="button" @onclick="LoadMorePreviewNotes" class="btn btn-primary">Load more</button>
</div>

@code {
    private List<NoteModel> _notesList = new();
    private int _page = 0;
    private int _pageSize = 10;

    [Parameter] [SupplyParameterFromQuery] public string? Search { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadMorePreviewNotes();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine(Search);
        _page = 0;
        _notesList = new List<NoteModel>();
        await LoadMorePreviewNotes();
        StateHasChanged();
    }

    private void SetSearchQuery()
    {
        var uri = new Uri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("Search", out var query))
        {
            Search = query;
        }
    }

    private async Task LoadContent(NoteModel note)
    {
        var getNoteResponse = await NotesService.GetByIdAsync(new GetNoteByIdRequest(note.Id));

        if (!getNoteResponse.IsError)
        {
            note.Content = getNoteResponse.Value.Content;
            ToggleNoteContent(note);
        }
    }

    private void ToggleNoteContent(NoteModel note) => note.IsContentVisible = !note.IsContentVisible;

    private void EditNote(NoteModel note) => NavigationManager.NavigateTo($"EditNote/{note.Id}");

    private async Task LoadMorePreviewNotes()
    {
        SetSearchQuery();

        var request = new GetPreviewNotesRequest
        {
            Page = _page + 1,
            PageSize = _pageSize,
            SearchQuery = Search
        };

        var notesListResponse = await NotesService.GetPreviewsAsync(request);

        if (!notesListResponse.IsError)
        {
            var newNotes = notesListResponse.Value.Select(x => new NoteModel
            {
                Id = x.Id,
                Title = x.Title,
                CreatedAt = x.CreatedAt
            }).ToList();

            if (newNotes.Any())
            {
                _notesList.AddRange(newNotes);
                _page++;
            }
        }
    }

}